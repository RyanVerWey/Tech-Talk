import mongoose from 'mongoose';const projectSchema = new mongoose.Schema({  title: {    type: String,    required: true,    trim: true,    maxLength: 100  },  description: {    type: String,    required: true,    maxLength: 2000  },  shortDescription: {    type: String,    required: true,    maxLength: 200  },  author: {    type: mongoose.Schema.Types.ObjectId,    ref: 'User',    required: true  },  category: {    type: String,    required: true,    enum: [      'Web Development',      'Mobile App',      'Desktop Application',      'Game Development',      'AI/Machine Learning',      'Data Science',      'DevOps/Infrastructure',      'API/Backend',      'UI/UX Design',      'Open Source',      'Research',      'Other'    ]  },  techStack: [{    name: {      type: String,      required: true    },    category: {      type: String,      enum: ['Frontend', 'Backend', 'Database', 'DevOps', 'Mobile', 'Design', 'Other'],      default: 'Other'    }  }],  links: {    demo: {      type: String,      validate: {        validator: function(v) {          return !v || /^https?:\/\/.+/.test(v);        },        message: 'Demo link must be a valid URL'      }    },    github: {      type: String,      validate: {        validator: function(v) {          return !v || /^https?:\/\/(www\.)?github\.com\/.+/.test(v);        },        message: 'GitHub link must be a valid GitHub URL'      }    },    website: {      type: String,      validate: {        validator: function(v) {          return !v || /^https?:\/\/.+/.test(v);        },        message: 'Website link must be a valid URL'      }    }  },  images: [{    url: {      type: String,      required: true    },    caption: String,    isMain: {      type: Boolean,      default: false    }  }],  status: {    type: String,    enum: ['In Progress', 'Completed', 'Paused', 'Archived'],    default: 'In Progress'  },  collaborators: [{    user: {      type: mongoose.Schema.Types.ObjectId,      ref: 'User'    },    role: {      type: String,      default: 'Contributor'    }  }],  views: {    type: Number,    default: 0  },  likes: [{    user: {      type: mongoose.Schema.Types.ObjectId,      ref: 'User'    },    createdAt: {      type: Date,      default: Date.now    }  }],  comments: [{    user: {      type: mongoose.Schema.Types.ObjectId,      ref: 'User',      required: true    },    content: {      type: String,      required: true,      maxLength: 1000    },    createdAt: {      type: Date,      default: Date.now    }  }],  isPublic: {    type: Boolean,    default: true  },  isFeatured: {    type: Boolean,    default: false  },  isApproved: {    type: Boolean,    default: true  },  startDate: {    type: Date  },  endDate: {    type: Date  },  tags: [{    type: String,    lowercase: true,    trim: true  }]}, {  timestamps: true,  toJSON: { virtuals: true },  toObject: { virtuals: true }});projectSchema.virtual('likeCount').get(function() {  return this.likes ? this.likes.length : 0;});projectSchema.virtual('commentCount').get(function() {  return this.comments ? this.comments.length : 0;});projectSchema.virtual('mainImage').get(function() {  if (!this.images || this.images.length === 0) return null;  const main = this.images.find(img => img.isMain);  return main || this.images[0];});projectSchema.index({  title: 'text',  description: 'text',  shortDescription: 'text',  'techStack.name': 'text',  tags: 'text'});projectSchema.index({ category: 1 });projectSchema.index({ status: 1 });projectSchema.index({ isFeatured: 1 });projectSchema.index({ createdAt: -1 });projectSchema.index({ 'likes.user': 1 });projectSchema.pre('save', function(next) {  if (this.images && this.images.length > 0) {    const mainImages = this.images.filter(img => img.isMain);    if (mainImages.length > 1) {      this.images.forEach((img, index) => {        img.isMain = index === 0;      });    } else if (mainImages.length === 0) {      this.images[0].isMain = true;    }  }  next();});const Project = mongoose.model('Project', projectSchema);export default Project;
